// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  userId String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  billboards BillBoard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
}

model BillBoard {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  label String
  storeId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  imageUrl String
  categories Category[]

  @@index([storeId])
}


model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation("StoreToCategory",fields: [storeId] ,references: [id])
  billboardId String @db.ObjectId
  billboard BillBoard @relation(fields: [billboardId],references: [id],onDelete: Cascade)
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation("StoreToSize",fields: [storeId],references: [id])
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[] 

  @@index([storeId])
}

model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation("StoreToColor",fields: [storeId],references: [id])
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[] 

  @@index([storeId])
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  categoryId String @db.ObjectId
  category Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  name String
  price Int
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String @db.ObjectId
  size Size @relation(fields: [sizeId],references: [id])
  colorId String @db.ObjectId
  color Color @relation(fields: [colorId],references: [id])
  image Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderItems OrderItem[] 

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation("StoreToOrder",fields: [storeId],references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order Order @relation(fields: [orderId],references: [id])
  productId String @db.ObjectId
  product Product @relation(fields: [productId],references: [id])

  @@index([orderId])
  @@index([productId])
}

